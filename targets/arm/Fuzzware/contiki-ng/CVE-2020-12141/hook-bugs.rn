const OID_END = 0x20000c10;
const PACKET_LEN_PTR = 0x20000bcc;
const PACKET_LEN = 512;

struct SnmpArgs { buf, buf_len }

pub fn main(api) {
    // CVE check
    let args = SnmpArgs { buf: 0, buf_len: 0 };
    api.on_basic_block(Some(symbolizer::resolve("snmp_message_decode")?), |_| on_snmp_message_decode_args(args));
    // PORTING: hook before snmp_ber_decode_string => update last buf_len
    api.on_basic_block(Some(symbolizer::resolve("snmp_message_decode")?+0x92), |_| on_snmp_message_decode_update_buf_len(args));
    // PORTING: after snmp_ber_decode_string
    api.on_basic_block(Some(symbolizer::resolve("snmp_message_decode")?+0x9e), |_| on_snmp_message_decode_check_bounds(args));

    // Bug: fixed-Bug-snmp_oid_decode_oid_oob
    // PORTING: Hook bb after zero check in decoding loop of snmp_oid_decode_oid
    api.on_basic_block(Some(symbolizer::resolve("snmp_oid_decode_oid")?+0x60), |_| on_snmp_oid_decode_oid_oob());

    // Bug: fixed-Bug-snmp_engine_get_bulk-varbinds_length-oob
    api.on_basic_block(Some(symbolizer::resolve("snmp_engine_get_bulk")?), |_| on_snmp_engine_get_bulk());

    // Bug: fixed-Bug-snmp_oid_copy-missing-terminator-oob
    // Porting: Hook after 0xffffffff termination check is passed and next write about to occur
    api.on_basic_block(Some(symbolizer::resolve("snmp_oid_copy")?+0x16), |_| on_snmp_oid_copy_write());

    // Catch-all hooks: There are different, non-distinct places in snmp handling where similar out-of-bounds accesses may be performed
    // As the SNMP implementation was replaced completely, we assume the non-distinct crashes to be collisions with CVE-2020-12141
    let args_generic = SnmpArgs { buf: 0, buf_len: 0 };
    api.on_basic_block(Some(symbolizer::resolve("snmp_message_decode")?), |_| on_snmp_message_decode_args_generic(args_generic));
    api.on_basic_block(None, |pc| on_snmp_message_decode_check_bounds_generic(pc, args_generic));
    api.on_basic_block(None, |_| packet_oob());
}

// We duplicate this function for compatibility with fuzzware hook conversion
fn on_snmp_message_decode_args(args) {
    args.buf = register::read("R0")?;
    args.buf_len = register::read("R1")?;
}

fn on_snmp_message_decode_args_generic(args_generic) {
    args_generic.buf = register::read("R0")?;
    args_generic.buf_len = register::read("R1")?;
}

fn on_snmp_message_decode_update_buf_len(args) {
    let sp = register::read("SP")?;
    let buf_len = memory::read_u32(sp + 4)?;

    args.buf_len = buf_len;
}

fn on_snmp_message_decode_check_bounds(args) {
    let sp = register::read("SP")?;
    let buf_len = memory::read_u32(sp + 4)?;

    // buf_len overflow
    if buf_len > args.buf_len {
        input::add_bug("CVE-2020-12141");
    }
}

fn on_snmp_message_decode_check_bounds_generic(pc, args_generic) {
    // only validate in snmp_message_decode
    if pc < 0x002058c2 || pc > 0x00205bb4 {
        return;
    }

    let sp = register::read("SP")?;
    let buf_len = memory::read_u32(sp + 4)?;

    // verify buf_len never increases
    if buf_len > args_generic.buf_len {
        // NOTE: this is a more generic check for OOB's in CVE-2020-12141
        input::add_bug("DUPLICATE-CVE-2020-12141");
    }

    // update last buf_len
    args_generic.buf_len = buf_len;
}

fn packet_oob() {
    let packet_len = memory::read_u32(PACKET_LEN_PTR)?;

    if packet_len > PACKET_LEN {
        // NOTE: this is a more generic check for OOB's in CVE-2020-12141
        input::add_bug("DUPLICATE-CVE-2020-12141");
    }
}

fn on_snmp_oid_decode_oid_oob() {
    let r2 = register::read("r2")?;

    if r2 > OID_END {
        input::add_bug("fixed-Bug-snmp_oid_decode_oid_oob");
    }
}

fn on_snmp_engine_get_bulk() {
    let varbinds_length_ptr = register::read("R2")?;
    let varbinds_length = memory::read_u32(varbinds_length_ptr)?;

    if varbinds_length > 2 {
        input::add_bug("fixed-Bug-snmp_engine_get_bulk-varbinds_length-oob");
    }
}

fn on_snmp_oid_copy_write() {
    // Before writing in snmp_oid_copy, check that the index is in bounds of 16 u32's

    // Porting: r2 == i
    const OID_ARR_SIZE = 16;
    let write_ind = register::read("R2")?;

    if write_ind >= OID_ARR_SIZE {
        input::add_bug("fixed-Bug-snmp_oid_copy-missing-terminator-oob");
    }
}
